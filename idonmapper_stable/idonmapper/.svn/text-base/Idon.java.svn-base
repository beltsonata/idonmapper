package idonmapper;

import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.lang.Math;
import java.awt.geom.*;
import java.awt.font.*;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;


// notes

/*
see:
http://java.sun.com/developer/JDCTechTips/2003/tt0520.html
for altering hexShape brush style (i.e. dotted/emboldened for
selected Idons)
*/


public class Idon extends Hexagon 
{
    protected String idea;
    private boolean containsIdea = false;
    
    // whether or not the hexPanel is in the 'isSelected' group on the hexpanel
    private boolean isSelected = false;
    
    private boolean hasTextRect = false;
    
    protected Color fillColor = Color.yellow;
    protected Rectangle textAreaRect;
    
    private Font font;
    private FontRenderContext frc;
    private LineBreakMeasurer breakMeasurer;
    
    private ArrayList<TextLayout> layouts = null;
    
    private AttributedString attrString;
    
    int paraStart;
    int paraEnd;
    
    // topLeft of textbox rectangle
    private Point locationPoint;
    
    /**
     * Create an Idon. MAIN CONSTRUCTOR.
     */
    public Idon(double size, double xPos, double yPos)
    {
        super(size, xPos, yPos);
        createTextAreaBounds();
    }
    
    /*
     * Creates an idon from a hexagon.
     */
    public Idon(Hexagon h)
    {
        this(h.getSideLength(), h.getXPos(), h.getYPos());
    }
    
    
    
    protected void deselect()
    {
        isSelected = false;
    }
    protected void select()
    {
        isSelected = true;
    }
    
    /**
     * Return the idea associated with this Idon.
     */
    public String getIdea()
    {
        return idea;
    }
    
    /**
     * Enters an idea into the idon. 
     */
    /*
     * After setting an idea, the 'layouts' var
     * is set to null to ensure
     */
    public void setIdea(String s)
    {
        this.idea = s.toUpperCase();
        containsIdea = true;
        layouts = null;
    }
    
    /*
     * Sets the idon text's rectangular bounding box that is used to
     * keeps the text within the Hexagonal shape. It iterates the hexagonal 
     * shape's GeneralPath to extract the internal rectangle as a series of 
     * points.
     *
     */    
    private void createTextAreaBounds()
    {   
        if(hasTextRect)
        {
            return;
        }
        
        System.out.println("setting up idon text rectangle");
        
        PathIterator rectPath = getShape().getPathIterator(null);
        
        double coords[] = new double[6];
        Point2D.Double[] rectPoints = new Point2D.Double[4];
        
        int count = 0;
        
        while(!rectPath.isDone())
        {
            int i = rectPath.currentSegment(coords);
            if(i == PathIterator.SEG_LINETO)
            {
                ++count;
                
                // System.out.println("line to " + coords[0] + ", " + coords[1]);
                
                switch(count)
                {
                    case 3: 
                        // top left of rect
                        rectPoints[0] = new Point2D.Double(coords[0], coords[1]);
                    break;
                    case 5:
                        // top right of rect
                        rectPoints[1] = new Point2D.Double(coords[0], coords[1]);
                    break;
                    case 2:
                        // bottom left of rect
                        rectPoints[2] = new Point2D.Double(coords[0], coords[1]);
                    break;
                } 
            }
            rectPath.next();
        }
          
        double x = rectPoints[0].getX();
        double y = rectPoints[0].getY();
        
        locationPoint = new Point((int)x, (int)y);
        
        double rHeight = rectPoints[2].getY() - rectPoints[0].getY();
        double rWidth = rectPoints[1].getX() - rectPoints[0].getX() ;
        
        // create the box from the above points:
        textAreaRect = new Rectangle((int)x, (int)y, (int)rWidth, (int)rHeight);
        hasTextRect = true;
    }
    
    public String toString()
    {
        return idea;
    }
    
    /**
     * Draws the Idon's hexagon shape and fills it
     * with the specific colour. This method is called from
     * HexPanel.
     */
    public void draw(Graphics2D g)
    {
        super.draw(g);
        // ^ draws the hexagonal shape.
        frc = g.getFontRenderContext();
        // next fill the interior of the idon
        drawBackgroundColour(g);
        
        // draw the idea string
        drawIdeaText(g);
        
        //g.draw(textAreaRect);
    }
    
    /**
     * Draws the text layouts inside the textAreaRect.
     */
    private void drawIdeaText(Graphics2D g)
    {   
        assert(frc != null);
        
        if(layouts == null)
        {
            createTextLayouts();
        }
        
        int yLevel = 1;
        float xPadding = 0.5f;
        
        for(TextLayout t : layouts)
        {
            float x = ((float)getTextXPos() + xPadding);
            float y = (float)getTextYPos() + (t.getAscent() * yLevel);
            if(textAreaRect.contains(new Point2D.Float(x, y)))
            {
                t.draw(g, x, y); 
            }
            ++yLevel;
        }
    }
    
    /*
     * Creates the text layout objects from the idea String.
     */
    private void createTextLayouts()
    {
        layouts = new ArrayList<TextLayout>();
        
        System.out.println("createTextLyouts for " + this);
        
        AttributedString attrString = new AttributedString(idea);
        AttributedCharacterIterator itr = attrString.getIterator();
        breakMeasurer = new LineBreakMeasurer(itr, frc);
        paraStart = itr.getBeginIndex();
        paraEnd = itr.getEndIndex();
        breakMeasurer.setPosition(paraStart);
        
        layouts.clear();
        
        if(this.textAreaRect != null)
        {
            System.out.println("text area rect is OK!");
        }
        
        while (breakMeasurer.getPosition() < paraEnd) 
        {
            TextLayout currentLayout = breakMeasurer.nextLayout(
                (int)textAreaRect.getWidth());
            layouts.add(currentLayout);
        }
    }
    
    private void isNull(Object o, String name)
    {
        if(o == null)
        {
            System.out.println("Warning: " + name + " is null");
        }
    }
    
    private void drawBackgroundColour(Graphics2D g)
    {
        Color oldColor = g.getColor();
        g.setColor(this.fillColor);
        g.fill(getShape());
        g.setColor(oldColor);
    }
    
    /*
     *  Get the X and y positions for the label
     */
    public double getTextXPos()
    {
        return locationPoint.x;
    }
    public double getTextYPos()
    {
        return locationPoint.y;
    }
    
    /**
     * Retrieve the Coord in the HexPanel for this
     * Idon.
     */
    protected Coord getCoord()
    {        
        /*
         * Should probably refactor this into HexPanel (or Controller?)
         * and pass an Idon with it...
         */
        assert(Controller.getHexPanel() != null);
        Coord c = Controller.getHexPanel().getCoordFromString(this.getIdea());
        
        if(c == null)
        {
            //throw new NullPointerException("getCoord in Idon is null :(");
            System.out.println("getCoord in Idon is null :(");
            return null;
        }
        return c;
    }
    
    
    
    
    
}